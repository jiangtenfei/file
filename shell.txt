
  vim  莫行模式
    :nohl   取消高亮






vnc  172.40.50.188:8


shell      逻辑思维   现实的问题---代码（命令）


公式----------------------应用题



理解    自己的逻辑思维能力

shell  就像是汽车的总称      bash  像是某种车（宝马，奔驰）
解释器程序的概述                     某种解释器程序


bash    sh  tcsh  csh    cat /etc/shells



at 21:00    设定时间计划任务

yum -y install ksh    安装ksh包

cat /etc/shells     查看有哪些解释器程序

ksh               进入ksh环境            redhat使用的bash，人性功能全

useradd -s  /bin/ksh  zhangsan   执行修改执行环境操作
usermod  -s  /bin/bash  zhangsan

grep  HISTSIZE  /etc/profile      检查历史命令的容量
vim  /etc/profile        修改历史命令的容量
history | wc -l   查看当前用户记录的历史命令条数
history | tail    最近十条   history | head
!1028   调用第1028条历史命令     !cat  调用最近一条以cat开头的命令
history -c   清空自己的历史命令   cat  ~/.bash_history
 > ~/.bash_history     清空历史命令保存文件



alias   产看已经定义的命令别名列表
grep '^alias' ~/.bashrc   别名的设置一般存放在用户的.bashrc文件内
alias lh='ls -lh'     自定义新的命令别名  alias lh  确认结果
lh  /etc/fstab   验证别名命令的效果
unalias lh   取消别名     alias lh

>   2>   &>  <       重定型标准输入/输出/错误输出   >>  2>>  &>>  

mail -s '..'  root  <  /etc/passwd   发送文件内容多的邮件
echo ‘..’  | mail -s '..' root    内容小的邮件     
echo '..' > a.txt   +  mail -s  '..' root  < a.txt
   |   一条命令可以实现复杂的功能      管道
yum list | grep samba | wc -l    一条命令行支持多个管道


1，屏幕显示hello world
2，自动配置yum源
3，自动安装vsftpd软件；自动启动服务；自动设置开机自启


 *env   查看有哪些环境变量（系统定义好的）   set 检查变量设置
                                   unset 撤销自定义的变量

PWD USER HOME UID SHELL HOSTNAME   MAIL  RANDOM
 
PS1=''                  PS2=''


$$ 执行脚本的PID(进程号)   $0  $1  $2     $?    $#    $*   $$   

双引号可以界定一个完整字符串                     "echo $x"
单引号界定一个完整的字符串，并且可以实现屏蔽特殊符号的功能。  'echo $x'


变量的扩张应用    ""   ''  ` `    read -p       stty -echo  stty echo
  
export xx="123"    使用export命令将xx发布为全剧变量





2222222222222222222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222222222222222222
2222222222222222222222222222222222222222222222222222222222222222





expr  整数运算工具    \*   乘法加上 \ ，取消*的预定shell
       +       -      *      /        %

$[]   或  $(())  乘法操作*无需转义，运算符两侧可以无空格；引用变量可省略 $ 符号

let命令
expr或$[]、$(())方式只进行运算，并不会改变变量的值；而let命令可以直接对变量值做运算再保存新的值   let运算操作并不显示结果，但是可以结合echo命令来查看：
let x++ ；x++(x=x+1) let x--;(x=x-1) let x+=3;(x=x+3) let x-=3;
(x=x-3) let x*=2;(x=x*2)  let x/=2;(x=x/2) let x%=2;(x=x%2)

bc交互式运算      可以运算非整数，小数位的长度可采用scale=N限制
bc非交互式运算   将需要运算的表达式通过管道操作交给bc运算
                    echo 'scale=4;12.34+5.678' | bc

echo "2==2" | bc    ;  echo "2>3"  | bc  ;  echo "3<4" | bc
bc可以用来做判断   0 错  1 对

条件测试的基本用法
“test 表达式”          [ 表达式 ]      == (相等)  != （不相等）

 一行执行多条命令的情况
   # A && B     and     //仅当A命令执行成功，才执行B命令
   # A || B     or     //仅当A命令执行失败，才执行B命令
   # A ;  B           //执行A命令后执行B命令，两者没有逻辑关系
   # A && B || C     //思考？

-z 检查变量的值是否未设置（空值）  [ -z $NB ]      -n=! -z 不为空


1,字串判断   ==  ！=  -z  !-z
2.数字判断   -eq   -ne   -gt  -ge  -lt  -le
  [ 3 -eq 3 ]  && echo y  || echo n
3.文件/目录的判断     -e  -f  -d  -r  -w  -x

if  单分支    双分支     多分支

ping 192.168.4.254 -c 2   ping两次   -c 几次   -i 指定ping的间隔时间
                  -W 等待反馈的超时秒数




333333333333333333333333333333333333333333333333333333333333
333333333333333333333333333333333333333333333333333333333333333
33333333333333333333333333333333333333333333333333333333333333333




for  i in {1..5}   `seq 5`   `cat /etc/passwd` 
do
..
done
  

while :      判断是真       [  $i -le 100 ]
do
..                        let i++
done

case  变量  in          简化的if判断
1)
   命令;;
2)
   命令;;
*)
   命令;;
esac

funcation  函数名 {
  命令
}
                                     脚本，上面先定义函数； 下面再调用
  函数名（）  {
     命令
}

#  ·Shell版fork炸弹
#    — 仅13个字符：    .(){ .|.& };.
#    — 递归死循环，可迅速耗尽系统资源


*echo {1...5}    {}里面不能有变量
*seq 5      可以是变量, 作用和{}相同，但是在shell里。要用``括起来
`ls /etc/*.conf`   可以是一个有输出的命令

bash -x /root/user.sh   #-x 可以看到脚本执行的过程，方便排错

echo -n ..    # -n 输出完不要换行

sar -P ALL 1 100 #-P 看我的cpu信息  ALL 全部的 1 1秒看一次  100看100次

case 分支属于匹配执行的方式     

while 循环   匹配条件  无心的死循环   ！

for 循环   指定次数，范围

if  选择判断

echo -e "\033[34mOK\\033[0m"       #34字体大小  OK输出什么字颜色
                                              带颜色的echo
shell函数

     halt  reboot=shutdown -h now  


tmp 临时密码 


 break   跳出当前所在的循环体，执行循环体后的语句块
continue 跳过循环体内余下的语句，重新判断条件以决定是否需要执行下一个循环
 exit    退出脚本，默认的返回值是0




44444444444444444444444444444444444444444444444444444444444444
444444444444444444444444444444444444444444444444444444444444444444
444444444444444444444444444444444444444444444444444444444444444




字串截取的三种用法：
 ·    ${变量名:起始位置:长度}
 ·   expr substr "$变量名"   起始位置   长度  
  ·   echo $变量名 | cut -b 起始位置—结束位置
字串替换的两种用法：
 ·  只替换第一个匹配结果： ${变量名/old/new}
 ·  替换全部匹配结果 ： ${变量名//old/new}
字符串掐头去尾：
  · 从左向右，最短匹配删除 ： ${变量名#*关键字}
  ·              长          ： ${变量名##*关键字}
  · 从右向左，   短         ： ${变量名%关键字*}
  ·               长          ：${变量名%%关键字*}

#phone="15684649976468"     
#echo ${#phone}    #变量phone包括多少 个字符
#echo ${phone:6:2}  #从左侧第七个开始，截取两位～起始位置从0开始


mv  $i  ${i%.*}.txt




数组  （是一个变量，一个变量可以存多个值）
	x=(11   22   33   44)
	echo ${x[0]}  自0开始
	echo ${x[1]}
	echo ${x[2]}
	echo ${x[3]}
	echo ${x[*]}   全部显示    ${x[*]}=${x[@]}  显示所有
	echo ${#x[*]}   统计变量的个数

追加数组——内容
echo ${#x[*]}   显示变量的个数 
x[5]=55         变量个数+，内容
echo ${x[*]}     查看全部的变量


mail -s "test"  root   <<  EOF  #EOF往下的内容一直到下一个EOF，
  xxx                               都是邮件的内容
  yyy
  zzz
EOF


yum -y install expect   #expect 是自动交互软件,帮人自动交互

字符串初值的处理
一，字符串初值的最常见处理方法   1）只取值  ${var:-word}
  #xx=11
  #echo ${xx:-123}  //因xx已存在，输出变量xx的值
       #unset xx
   #echo ${xx:-123}   //xx不存在，所以会输出 123
二，编写脚本...
   3）expect 预期交互 

expect <<EOF
spawn  命令
expect ""   {send "..\n"}
EOF  #结尾

expect脚本的最后一行默认不执行
如果不希望ssh时出现yes/no的提示，远程时使用如下选项:
# ssh -o StrictHostKeyChecking=no server0



什么是正则表达式？
 — 使用“一串符号” 来描述有共同属性的数据

正则表达式                  grep -E  / egrep  过滤工具
基本：
   ^   匹配行首
   $    匹配行尾
   [ ]    集合，匹配集合中的任意单个字符
   [ ^ ]    对集合取反
    .       匹配任意单个字符    "\.""\ "屏蔽"."的特殊含义，只是作为普通的.
     *      匹配前一个字符任意次数 [ *不允许单独使用 ]
   \{n,m\}   匹配前一个字符n到m次
                 \{n\}  匹配n次   \{n,\} 匹配n次以上    

egrep  -n 内容+行号  -i 忽略大小  -v 反  -c 行数     -q 静默  --color



过滤开头不是英文字母
小数点结尾


扩张正则列表

   +       1+
   ？      0-1
  {n,m}   n-m
    ()      整体
    |       或者
   \b    单词边界



***  echo ${变量}
     echo ${变量::}    截取
     echo ${变量///}   替换        ${变量//old/new/} 全替换
     echo ${变量#*:}    掐头       ${变量##*:}   最长匹配
     echo ${变量%:*}    去尾       ${变量%%:*}   最长匹配
     echo  ${变量:-1234}    变量付初值
*** 数组 （一个可以存多个值的变量）
        x[0]=12
        x[1]=12
        x[2]=12
      x=(12  12  12)        echo ${x[0]}
***  expect << EOF
     spawn 命令
     expect 看屏幕输出 { send "输入键盘指令\n"}
     EOF
***  正则表达式
      ^     开始
      $    结尾
      [ ]  集合，集合中的任意单个字符
      [^]   对集合取反
      .     任意单个字符
      *     前一个字符出现了任意次，包括0次
      \{n,m\}    \{n,\}   \{n\}  前一个字符 n-m n+ n  次


*** 扩张正则列表

	   +         1+
	   ？        0-1
	  {n,m}     n-m
	    ()         整体
	    |          或者
	   \b      单词边界





55555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555
555555555555555555555555555555555555555555555555555555555555


/etc/sysconfig/network-scripts/ifcfg-eth0
ip 改了后，写到这个文件里了


 #wait 等后台进程结束后，命令行才结束。返回
 #clear 清屏


*#$
sed ·Stream EDitor ,流式编辑器
 — 非交互，基于模式匹配过滤及修改文本
 — 逐行处理，并将结果输出到屏幕
 — 可实现对文本的输出、删除、替换、复制、剪切、导入、导出等各种操作

sed -n  屏蔽默认输出，默认sed会输出读取文档的全部内容
    -r  让sed支持扩展正则
    -i  sed直接修改源文件，默认sed只是通过内存临时修改文件，源文件无影响
  
  *sed 工具的条件，
   1） 行号 
    #sed -n '3p' '3,5p' '3p;5p' '3,+10p' '1~2p' '2~2p'
 
    #sed -n '1~2p' ..  从第一行开始，每隔2行打印以下  俗称步长,步长2

   2) 正则                                        '/bash$/p' 结尾
     打印包含root的行
     #sed  -n '/root/p'  /etc/passwd  '/^root/p' '5p' 'p'
            '/root/!p' 不包括
   

   3)   p 、打印行    d  、删除行     s  、字符替换  
         a  追加（后    i  插入（前     c 全行都更换掉
         正则  运用到命令里
      #sed -n 'p' /etc/passwd   #没有条件，则表示匹配所有行
	#sed -n '4p' a.txt    #输出第4行
	#sed -n '4,7p' a.txt   #输出第4～7行
	#sed -n '4,+10p' a.txt  #输出第4及其后的十行
	#sed -n '/^bin/p' a.txt #输出以bin开头的行
	#sed -n '$+' a.txt   #输出文件的行数

	#sed  '3,5d' a.txt  //删除第3～5行  
	#sed  '/xml/d' a.txt  #删除所有包含xml的行
	#sed  '/xml/!d' a.txt  #删除所有不包含xml的行
	#sed  '/^install/d' a.txt #删除以install开头的行
	#sed  '$d' a.txt  #删除文件的最后一行
	#sed  '/^$/d' a.txt  #删除所有空行

	#sed  's/xml/XML/' a.txt  #将每行中的第一个xml替换XML
	#sed  's/xml/XML/3' a.txt  #将每行中的第三个xml替换XML
	#sed  's/xml/XML/g'  a.txt #  所有的
	#sed  's/xml//g'  a.txt   #  所有的xml替换成空（删除）
	#sed  's#/bin/bash#/sbin/sh#'   #/bin/bash替换为/sbin/sh
    **替换操作的分隔“/”可改用其他字符，如#、$等，便于修改文件路径
	#sed  '4,s/^/#/'  a.txt  #将第4～7行注释掉（行首加#）
	sed  's/^#an/an/' a.txt  #解除以an开头行的注释（行首去掉#

	#sed 's/.//2'  a.txt   # .所有的  2 替换第二个字符

	# sed -r 's/^(.)(.*)(.)$/\3\2\1/' nssw.txt

	# sed 's/[0-9]//' nssw.txt
	# sed -r 's/[0-9]//g;s/^( )+//' nssw2.txt

	# sed 's/([A-Z])/[\1]/g' nssw.txt

	#sed  's/$/***/' a.txt  #在每行末尾添加***
   *cat -A a.txt  #可以看到，每行末尾都默认以$结尾，$替换为*** 

    a=append 追加  （后   在某一行下面写入
    i=insert  插入 （前   在某一行前面写入，
     #sed  '2a  xxx'  a.txt
     #sed  '2i xxx'   a.txt
     #sed  '/root/a xxx'  a.txt  后        '/xa/i xxx'前    
     #sed  '2c  xxx'  a.txt



linux:/etc/hosts
windows:/windows/systemc32/drivers/etc/hosts



sed 文本编辑器，增  删  改 查
    总结知识点： 
   #sed [选项] '条件指令' 文件
    选项:
	-n 屏蔽默认输出
	-r 支持扩展正则
	-i 修改源文件
	条件：
	行号 4 4,5 4~2 4,+10
	/正则/
	指令：
	p 打印
	d 删除
	s 替换s/旧/新/g
	a 追加
	i 插入
	c 替换行


#sed  '2h,5g' a.txt
#sed  '2H,5G' a.txt


**** cat -A /etc/fstab    #末尾行都默认的是 $ 结尾

6666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666
6666666666666666666666666666666666666666666666666666
6




*sed  文本编辑器，修改文件  增  删  改   查

*awk  数据过滤，查数据       = grep


* awk 选项 'BEGIN{指令}  条件{指令}  END{指令}'
   print "常量字符串"
   print $0 $1 $2 .. NR NF
  过滤条件：
  1，正则
      /正则/  $1~/正则/  $2~/正则/  $1!~/正则/
  2，数字或字符比较
  NR==3   $3>=1000  $3<1000 $4<10  $5<1000
   $1="root"  $1!="root"
   df -h  挂载使用清空      free 空闲内存
  3，逻辑判断
        && 并且    ||  或者
  4，运算
    awk 'BEGIN{print x++}'
    awk 'BEGIN{print x=x+8}'
* 流程控制  if  分支
  if($3>=1000){x++}else{y++}





过滤  统计      == grep   |  wc    

 ·  awk 编程语言 （不学）/数据处理引擎（主要学习的方面

awk 基本操作方法
 ·  awk 选项  '条件{指令}'    文件     print  ; 分隔
         {print $1，$3}     $ 表示列    默认空格，Tab空  分隔列

#free   看内存，交换分区
    #awk -F:  '{print $1}'  /etc/passwd  *-F  指定分隔符 ：
    #awk -F"[:/]" '{print $1,$10}'  /etc/passwd   *[:/] 正则
    #awk -F: '{print $1,"的解释器:",$7}' /etc/passwd
  "" 可以打印长量，有引号   中间有逗号，有空格。没逗号，也可以，就没空格了
   #awk -F: '{print $NF}' /etc/passwd #输出每行最后一个字段  
  **awk常用内置变量：
	  $0 文本当前行的全部内容
	  $1	文本的第1列
	  $2	文件的第2列
	  $3	文件的第3列，依此类推
	  NR	文件当前行的行号
	  NF	文件当前行的列数（有几列）

   #ifconfig eth0 | awk '/RX p/{print $5}'  //过滤接受数据的流量
            #RX p..接受数据流量的行   第五列      * TX p 发送数据
   # df -h | awk '/\/$/{print $4}'   提取根分区剩余流量
          #根分区  末尾以 /  结尾，第四列   “  \/  屏蔽 /”

# tailf /var/log/secure  动态看..文件的后十行
# tailf /var/log/secure | awk '/Accepted/{print $11}'   成功
# tailf /var/log/secure | awk '/Failed/{print $11}'   失败
     #其他机器远程ssh本机， 查看访问成功/失败 的主机ip


F5 刷新

#awk  [选项]  ' BEGIN{指令} {指令} END{指令}'  文件
   BEGIN{ }	 行前处理，读取文件内容前执行，指令执行1次    初始化
    { }	  逐行处理，读取文件过程中执行，指令执行n次    指令
   END{ }	 行后处理，读取文件结束后执行，指令执行1次     总结

#awk 'BEGIN{A=24;print A*2}'   #awk 里，A不用加$.默认的就是变量
#awk 'BEGIN{print x+1}'   #任何字母可以不需要定义，直接用，默认的是0
                              a-Z
#awk 'BEGIN{x=0}/bash$/{x++}END{print x}' /etc/passwd

# awk -F: 'BEGIN{print "用户名","UID","家目录"}{print $1,$3,$6}
END{print "总用户量："NR}' /etc/passwd  | column -t  
                                 | column -t 列、纵，对齐

***awk 处理条件：
  1) 使用正则设置条件
    awk -F: '/bash$/{print}' /etc/passwd
    awk -F: '/bash$/' /etc/passwd
    awk -F: '$1~/root/' /etc/passwd       ~ 正则匹配  模糊查找
    awk -F: '/^root/'  /etc/passwd       包含就匹配  区别  =  no
                ~ 包含    !~ 不包含
       awk -F: '$7!~/nologin$/{print $1,$7}' /etc/passwd
   **  条件
     /正则/  全行匹配（包含即可） /root/
     $1~/正则/   第一列匹配 （包含即可）
    $1!~/root/    不包含      缺点，模糊   不精确

  2) 使用数值/字符串比较设置条件
        比较符号：==(等于) !=（不等于） >（大于）
        >=（大于等于） <（小于） <=（小于等于）
     awk  'NR==3{print $1}'  /etc/passwd
        awk -F: '$3>=1000{print $1}' /etc/passwd   非系统用户
     awk -F: '$1=="root"' /etc/passwd  #awk下，字符串必须加“”
   3) 逻辑测试条件    &&    ||
   awk -F: '$3>1000&&$3<1003' /etc/passwd
   awk -F: '$3>10000||$3<10'  /etc/passwd    
    awk -F: '$3>1000&&$3<10'  /etc/passwd
    awk -F: '$3>1000||$3<1003' /etc/passwd
    # awk 语法没问题就不出错， $  > && || < 之间对空格没要求
 

***** 
   awk  处理条件的设置：
    /正则/    数字/字符串       逻辑 &&  ||      数字运算

   # i=root     # -v 调用shell设定的变量
   # awk -F: -v x=$i '$1==x' /etc/shadow      
   #grep "^$i" /etc/shadow  | awk -F: '{print $1,$2}'

 *** awk 流程控制  一，if分支结构
awk  选项      '条件{指令}'  文件
# awk -F: '$3<=1000{x++}END{print x}' /etc/passwd

awk  选项      '{if ($3<=1000){x++}}END{print x}'    文件
                                      #系统用户有多少个
if($3<=1000){
x++
}                     if 的单分支判断，同上

if ($3<=1000){x++}else{y++}

# awk -F: '{if($3<=1000){x++}else{y++}}END{print x,y}' /etc/passwd         if 的双分支判断


  ***二，awk 数组  (面试里的经典，比较难，但是有用。必须熟记)
  #awk 'BEGIN{x[0]=11;x[1]=22;print a[0],a[2]}'
           #注意  定义数组用 ； 分隔， ;print  调用 用 ， 分隔
  #awk 'BEGIN{a["a"]=11;a["b"]=22;print a["a"],a["b"]}'
            #字母 加 ""
  #awk 'BEGIN{a[0]=1;a[1]=2;a[2]=3;for(i in a){print i,a[i]}}'
             #数组在输出所有变量时    a[i]   加i，加上变量号，好区分


#ll -h /var/log/httpd/access_log     5列$5 能看到文本大小，
                        增加用户访问量，会在日志里记录。所以文件大小会变化
# wc -l /var/log/httpd/access_log   访问量增加，行数会变化

#ab -c100 -n100000 http://192.168.4.254/
   -c 模拟有100人   -n 访问次数

 ** deny of service   #dos 攻击

#awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}'   | sort -n
    #统计每个ip访问的次数  ip 变量     # sort -n  从小到大排序

# who | awk '{root[$1]++}END{for(i in root){print root[i],i}}'
       # 扩展   统计 用户root 开启的终端  只有 $1 会变，其他都可固定不变









 *** awk 扩展应用
 



  #echo -n   横向输出，不要回车  
  #column -t   按列排版，纵  
  #sort -n     从小到大排序   -n 比较整串数字
                没有 -n 只会比较一串数字的第一个，然后第次






77777777777777777777777777777777777777777777777777777777777
7777777777777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777777




源码包不支持  systemctl start stop  status  ..
    /usr/local/nginx/sbin/ngix
    /usr/



  ps aux | grep httpd  | grep -v grep



  netstat -nutlp   可以看到所有启动的服务 

  uptime   看 cpu

  invalid user  无效的用户

   $!   最后一个进程号



  \n== 回车 Enter











